// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:bintango_jp/model/tango_entity.dart';
import 'package:bintango_jp/generated/json/tango_entity.g.dart';
import 'package:bintango_jp/model/translate_response_entity.dart';
import 'package:bintango_jp/generated/json/translate_response_entity.g.dart';
import 'package:bintango_jp/utils/analytics/analytics_event_entity.dart';
import 'package:bintango_jp/generated/json/analytics_event_entity.g.dart';

JsonConvert jsonConvert = JsonConvert();

class JsonConvert {

  T? convert<T>(dynamic value) {
    if (value == null) {
      return null;
    }
    return asT<T>(value);
  }

  List<T?>? convertList<T>(List<dynamic>? value) {
    if (value == null) {
      return null;
    }
    try {
      return value.map((dynamic e) => asT<T>(e)).toList();
    } catch (e, stackTrace) {
      print('asT<$T> $e $stackTrace');
      return <T>[];
    }
  }

  List<T>? convertListNotNull<T>(dynamic value) {
    if (value == null) {
      return null;
    }
    try {
      return (value as List<dynamic>).map((dynamic e) => asT<T>(e)!).toList();
    } catch (e, stackTrace) {
      print('asT<$T> $e $stackTrace');
      return <T>[];
    }
  }
  T? asT<T extends Object?>(dynamic value) {
    if (value is T) {
      return value;
    }
		final String type = T.toString();
    try {
      final String valueS = value.toString();
      if (type == "String") {
        return valueS as T;
      } else if (type == "int") {
        final int? intValue = int.tryParse(valueS);
        if (intValue == null) {
          return double.tryParse(valueS)?.toInt() as T?;
        } else {
          return intValue as T;
        }      } else if (type == "double") {
        return double.parse(valueS) as T;
      } else if (type ==  "DateTime") {
        return DateTime.parse(valueS) as T;
      } else if (type ==  "bool") {
        if (valueS == '0' || valueS == '1') {
          return (valueS == '1') as T;
        }
        return (valueS == 'true') as T;
      } else {
        return JsonConvert.fromJsonAsT<T>(value);
      }
    } catch (e, stackTrace) {
      print('asT<$T> $e $stackTrace');
      return null;
    }
  } 
	//Go back to a single instance by type
	static M? _fromJsonSingle<M>(Map<String, dynamic> json) {
		final String type = M.toString();
		if(type == (TangoEntity).toString()){
			return TangoEntity.fromJson(json) as M;
		}
		if(type == (TranslateResponseEntity).toString()){
			return TranslateResponseEntity.fromJson(json) as M;
		}
		if(type == (AnalyticsEventEntity).toString()){
			return AnalyticsEventEntity.fromJson(json) as M;
		}
		if(type == (AnalyticsEventAnalyticsEventDetail).toString()){
			return AnalyticsEventAnalyticsEventDetail.fromJson(json) as M;
		}

		print("$type not found");
	
		return null;
}

  //list is returned by type
	static M? _getListChildType<M>(List<Map<String, dynamic>> data) {
		if(<TangoEntity>[] is M){
			return data.map<TangoEntity>((Map<String, dynamic> e) => TangoEntity.fromJson(e)).toList() as M;
		}
		if(<TranslateResponseEntity>[] is M){
			return data.map<TranslateResponseEntity>((Map<String, dynamic> e) => TranslateResponseEntity.fromJson(e)).toList() as M;
		}
		if(<AnalyticsEventEntity>[] is M){
			return data.map<AnalyticsEventEntity>((Map<String, dynamic> e) => AnalyticsEventEntity.fromJson(e)).toList() as M;
		}
		if(<AnalyticsEventAnalyticsEventDetail>[] is M){
			return data.map<AnalyticsEventAnalyticsEventDetail>((Map<String, dynamic> e) => AnalyticsEventAnalyticsEventDetail.fromJson(e)).toList() as M;
		}

		print("${M.toString()} not found");
	
		return null;
}

  static M? fromJsonAsT<M>(dynamic json) {
		if(json == null){
			return null;
		}		if (json is List) {
			return _getListChildType<M>(json.map((e) => e as Map<String, dynamic>).toList());
		} else {
			return _fromJsonSingle<M>(json as Map<String, dynamic>);
		}
	}
}